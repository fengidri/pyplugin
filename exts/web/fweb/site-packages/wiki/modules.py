# -*- coding:utf-8 -*-
#    author    :   丁雪峰
#    time      :   2014-11-14 23:48:24
#    email     :   fengidri@yeah.net
#    version   :   1.0.1


import os
import logging
import time
import shutil
import json
from textohtml import texstohtml
WIKIPATH=''
indexfile = None
classfile = None
tagsfile = None


__CLASS = {} # class: id, id, id
__TAGS = [] # tag, tag,
__INDEX = []# id, title, tags, ctime, mtime, public
class Info(object):
    def __init__(self, info):
        self.info    = info
        self.Id      = info[0]
        self.title   = info[1]
        self.tags    = info[2]
        self.ctime   = info[3]
        self.mtime   = info[4]
        self.public  = info[5]
        self.dirpath = os.path.join(WIKIPATH, str(self.Id))
    def settitle(self, title):
        self.title = title
        self.info[1] = title

    def settag(self, tags):
        tagadd(tags)
        self.info[2] = tags
    def setpublic(self, p):
        if p:
            self.public = 1
            self.info[5]   = 1
        else:
            self.public = 0
            self.info[5]   = 0


    def setcls(self, cls):
        clsdel(self.Id)
        clsadd(cls, self.Id)

    def list(self):
        return os.listdir(self.dirpath)


    def read(self, name=''):
        if not os.path.isdir(self.dirpath):
            logging.error('%s not dir' % self.dirpath)
            return None
        if not name:
            for f in os.listdir(self.dirpath):
                if f.startswith('index'):
                    name = f
                    break
            else:
                return None
        fp = os.path.join(self.dirpath, name)

        return (name, open(fp).read())

    def listdir(self):
        if not os.path.isdir(self.dirpath):
            logging.error('%s not dir' % self.dirpath)
            return []
        return os.listdir(self.dirpath)

    def write(self, name, content):
        self.info[4] = time.time()
        dirpath = self.dirpath

        if not os.path.isdir(dirpath):
            try:
                os.mkdir(dirpath)
            except:
                logging.error('mkdir %s fail' % dirpath)

        fp = os.path.join(dirpath, name)
        open(fp, 'w').write(content)

        hname = name.split('.')
        if len(hname) > 1:
            del hname[-1]
        hname.append('html')
        hname = '.'.join(hname)

        fp = os.path.join(dirpath, hname)
        texstohtml(content.decode('utf8'), fp)

    def delete(self):
        for i,info in enumerate(__INDEX):
            if info[0] == self.Id:
                del __INDEX[i]
                for l in __CLASS.values():
                    if self.Id in l:
                        l.remove(self.Id)

            if os.path.isdir(self.dirpath):
                shutil.rmtree(self.dirpath)
            return self.Id

    def delfn(self, fn):
        fp = os.path.join(self.dirpath, fn)
        if not os.path.isfile(fp):
            return False
        os.remove(fp)
        return True





def init(path):
    "初始化"
    global __INDEX
    global __TAGS
    global __CLASS
    global WIKIPATH
    global indexfile
    global classfile
    global tagsfile

    WIKIPATH = path
    indexfile = os.path.join(WIKIPATH, 'index.json')
    classfile = os.path.join(WIKIPATH, 'class.json')
    tagsfile = os.path.join(WIKIPATH, 'tags.json')
    if os.path.isfile(indexfile):
        logging.info("load pickle:%s" % indexfile)
        __INDEX = json.load(open(indexfile))
    else:
        __INDEX = []

    if os.path.isfile(classfile):
        logging.info("load pickle:%s" % classfile)
        __CLASS = json.load(open(classfile))
    else:
        __CLASS = {}

    if os.path.isfile(tagsfile):
        logging.info("load pickle:%s" % tagsfile)
        __TAGS = json.load(open(tagsfile))
    else:
        __TAGS = []

def save():
    json.dump( __INDEX,open(indexfile, 'w'), sort_keys=True, indent=4)
    json.dump( __CLASS,open(classfile, 'w'), sort_keys=True, indent=4)
    json.dump( __TAGS, open(tagsfile, 'w'), sort_keys=True, indent=4) 

def get(Id):
    for info in __INDEX:
        if info[0] == Id:
            return Info(info)
    return None



# 返回所有的文件的id
def list(order=''):
    return [t[0] for t in __INDEX]

#返回所有的tag
def get_tags():
    return __TAGS


#增加一个新文章. 
#返回文件的id
def add(title, content, cls='', tags=[], public=0):
    ctime = mtime = time.time()
    Id = int(time.time()) - 1416010575

    dirpath = os.path.join(WIKIPATH, str(Id))
    if os.path.isdir(dirpath):
        logging.error('%s dupile ' % dirpath)
        return -2#duplie path

    tagadd(tags)
    clsadd(cls, Id)

    try:
        os.mkdir(dirpath)
    except:
        logging.error('mkdir %s fail', dirpath)
        return -3
    fp = os.path.join(dirpath, "index.mkiv")
    open(fp, 'wb').write(content.encode('utf8'))

    fp = os.path.join(dirpath, "index.html")
    texstohtml(content.decode('utf8'), fp)


    __INDEX.append( [Id, title, tags, ctime, mtime, public] )
    return Id

def clsdel(Id):
    for k,l in __CLASS.items():
        if Id in l:
            l.remove(Id)
            if len(l) == 0:
                del __CLASS[k]

# 把id 增加到对应的分类中
def clsadd(cls, Id):#记录新增加的tag
    if not cls:
        cls = "Unclassified"
    c = __CLASS.get(cls)
    if not c:
        __CLASS[cls] = [Id]
    else:
        c.append(Id)
    print cls, id(cls), type(cls)
    for k in __CLASS:
        print k, id(k), type(k)

def tagadd(tags):
    for t in tags:
        if t not in __TAGS:
            __TAGS.append(t)



# 设置发布的状态
def setpublic(Id, public):
    info = __INDEX[Id]
    if not info:
        return -1
    info[4] =public
